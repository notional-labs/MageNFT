/// <reference types="ledgerhq__hw-transport" />
import { Secp256k1Pubkey } from "@cosmjs/amino";
import { HdPath } from "@cosmjs/crypto";
import Transport from "@ledgerhq/hw-transport";
export interface LedgerAppErrorResponse {
    readonly error_message?: string;
    readonly device_locked?: boolean;
}
export interface LedgerConnectorOptions {
    readonly hdPaths?: readonly HdPath[];
    readonly prefix?: string;
    readonly testModeAllowed?: boolean;
    /**
     * The name of the app the user must have opened on the Ledger.
     * This allows you to use this connector with forks of the Cosmos Hub Ledger app.
     * Support is provided on an best effort basis and only as long as those forks do not
     * significantly differ from the original app.
     *
     * Defaults to "Cosmos".
     */
    readonly ledgerAppName?: string;
    /**
     * The min version of the app the user must have opened on the Ledger.
     * This allows you to use this connector with forks of the Cosmos Hub Ledger app.
     * Support is provided on an best effort basis and only as long as those forks do not
     * significantly differ from the original app.
     *
     * Defaults to "1.5.3".
     */
    readonly minLedgerAppVersion?: string;
}
export interface AddressAndPubkey {
    readonly address: string;
    readonly pubkey: Secp256k1Pubkey;
}
export declare class LedgerConnector {
    private readonly testModeAllowed;
    private readonly hdPaths;
    private readonly prefix;
    private readonly ledgerAppName;
    private readonly minLedgerAppVersion;
    private readonly app;
    constructor(transport: Transport, options?: LedgerConnectorOptions);
    getCosmosAppVersion(): Promise<string>;
    getPubkey(hdPath?: HdPath): Promise<Uint8Array>;
    getPubkeys(): Promise<readonly Uint8Array[]>;
    getCosmosAddress(pubkey?: Uint8Array): Promise<string>;
    sign(message: Uint8Array, hdPath?: HdPath): Promise<Uint8Array>;
    private verifyAppMode;
    private getOpenAppName;
    private verifyAppVersion;
    private verifyCosmosAppIsOpen;
    private verifyDeviceIsReady;
    /**
     * Shows the user's address in the device and returns an address/pubkey pair.
     *
     * The address will be shown with the native prefix of the app (e.g. cosmos, persistence, desmos)
     * and does not support the usage of other address prefixes.
     *
     * @param path The HD path to show the address for. If unset, this is the first account.
     */
    showAddress(hdPath?: HdPath): Promise<AddressAndPubkey>;
    private handleLedgerErrors;
}
