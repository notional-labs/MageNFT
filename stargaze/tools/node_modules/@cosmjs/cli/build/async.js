"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapInAsyncFunction = void 0;
const babylon = __importStar(require("babylon"));
const recast = __importStar(require("recast"));
function wrapInAsyncFunction(code) {
    const codeInAsyncFunction = `(async () => {
    ${code}
  })()`;
    const ast = recast.parse(codeInAsyncFunction, { parser: babylon });
    const body = ast.program.body[0].expression.callee.body.body;
    if (body.length !== 0) {
        const last = body.pop();
        if (last.type === "ExpressionStatement") {
            body.push({
                type: "ReturnStatement",
                argument: last,
            });
        }
        else {
            body.push(last);
        }
    }
    // Remove var, let, const from variable declarations to make them available in context
    ast.program.body[0].expression.callee.body.body = body.map((node) => {
        if (node.type === "VariableDeclaration") {
            return {
                type: "ExpressionStatement",
                expression: {
                    type: "SequenceExpression",
                    expressions: node.declarations.map((declaration) => ({
                        type: "AssignmentExpression",
                        operator: "=",
                        left: declaration.id,
                        right: declaration.init,
                    })),
                },
            };
        }
        else {
            return node;
        }
    });
    return recast.print(ast).code;
}
exports.wrapInAsyncFunction = wrapInAsyncFunction;
//# sourceMappingURL=async.js.map